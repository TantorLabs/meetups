#=============================
# 1-Проверка доступности SIMD
#=============================
# команда для проверки доступности SIMD расширений в Linux
cat /proc/cpuinfo | grep -m 1 -o -E 'sse|sse2|sse3|ssse3|sse4_1|sse4_2|avx|avx2|avx512f' | sort | tr ' ' '\n'


# переходим в папку с примерами скачаными с репозитория. и выполняем там.
# либо открываем терминал уже из папки с примерами.
# компилируем выставив флаг:
# -O2 (для более оптимизированного кода) 

gcc -O2 -o supp 01_support.c 

# запуск

./supp


#===========================
# 2-Вывод вектора на экран
#===========================
# этот пример и последующие потребует поддержки SIMD
# компилируем выставив флаг:
# -O2 (для более оптимизированного кода) 
# -march=native (для поддержки AVX) 

gcc -O2 -march=native -o print_vec 02_print_vec.c 

# запуск

./print_vec


#================================
# 3-Поиск максимального значения
#================================
# компилируем выставив флаг:
# -O2 (для более оптимизированного кода) 
# -march=native (для поддержки AVX) 

gcc -O2 -march=native -o max_bench 03_max_bench.c 

# запуск
./max_bench


#====================================
# 4-Поиск позиции целевого Сравнение
#====================================
#
# компилируем выставив флаг:
# -O2 (для более оптимизированного кода) 
# -march=native (для поддержки AVX) 

gcc -O2 -march=native -o find_bench 04_find_bench.c 

# запуск

./find_bench

===============================
# компилируем выставив флаг:
# -O3 (для агрессивной оптимизации кода) 
# -march=native (для поддержки AVX) 

gcc -O3 -march=native -o find_bench 04_find_bench.c 

# запуск

./find_bench

===============================
# компилируем выставив флаг:
# -O3 (для агрессивной оптимизации кода) 
# -march=native (для поддержки AVX) 
# -funroll-loops (для принудительного раскрытия циклов Compile time размеров)

gcc -O3 -march=native -funroll-loops -o find_bench 04_find_bench.c 

# запуск

./find_bench


#==================================
# 5-Сортировка сетью на 8 элементов
#==================================
# компилируем выставив флаг:
# -O2 (для более оптимизированного кода) 
# -march=native (для поддержки AVX) 

gcc -O2 -march=native -o net_sort 05_net_sort_bench.c 

# запуск

./net_sort


#==========================================================================
# 6-Сортировка сетью на 8 элементов большого массива, сравнение с quicksort
#==========================================================================
# компилируем выставив флаг:
# -O2 (для более оптимизированного кода) 
# -march=native (для поддержки AVX) 

gcc -O2 -march=native -o net_sort_adv 06_net_sort_bench_advanced.c 

# запуск

./net_sort_adv

